/******************************************************************************
    Mapping Consumersâ€™ Context-Dependent Consumption Preferences: 
    A Multidimensional Unfolding Approach 
    (3rd revision, Journal of Consumer Resesarch)

    Update: 2019.09.15 (context.dependent.preference@gmail.com)
    Keywords: Context-dependent preference, multiple ideal points, factor structure approach, 
                 context-dependent multidimensional unfolding (CDMDU) model, context-dependent iso-preference contours
******************************************************************************   
******************************************************************************/

/******************************************************************************
 0. Getting Started
- GAUSS 3.2.8+ is required to use a set of procedures
- libeary co
  : This enables GAUSS to find the CONSTRAINED OPTIMIZATION(co) procedures.                                  
******************************************************************************/
new ;
library co; 
coset;

/******************************************************************************
 1. Data upload      
- data_toy.txt
  : We create sample data that is a total of 5,327 (n=5327) consumption occasions by 500 households (hh=500). 
  : We consider 10 brands (nbr-1=10) and 5 contexts.
- ns = 2 (2-segment)
  : We seek to project preferences onto a 2-dimensional attribute space for each consumer segment. 
******************************************************************************/
load dta[5327,79] = data_toy.txt ;
n = rows(dta) ;
nbr = 11 ; /* 10 brands and composite */
id = dta[.,1] ;
br = dta[.,4] ;
choi = dta[.,14:23]~(1-sumc(dta[.,14:23]')) ; /* brand choice */
chois = dta[.,79] ; /* consumption contexts */

context = dta[.,28:31] ; /* (base context is 4) */
context = context[.,1:3]~(1-sumc(context'))~context[.,4] ;/* 4 types consumption contexts (except context 1) */
lad = dta[.,35:45] ; /* local advertisement */
nad = dta[.,46:56] ; /* network TV advertisement */

id = delif(id, sumc(context').==0) ;
choi = delif(choi, sumc(context').==0) ;
n = rows(context) ; /* 5,327 consumption occasions */

ii = 1 ;
np = 1 ; /* 500 households */
pid = id[1,1] ;
do until ii == n+1 ;
	if id[ii,1] ne pid ;
		np = np+1 ;
        pid = id[ii,1] ;
	endif ;
	ii = ii+1 ;
endo ; 

clear p, scen, hh, ns, nd, rr, pp ;

hh = np ; /* 500 households */
ns = 2 ; /* 2 segments */
p = zeros(n, ns) ;
scen = zeros(np, ns) ;

/******************************************************************************
 2. Set the random draws 
- We represents a random effects model with a hybrid discrete-continuous heterogeneity distribution. 
- data_het.txt
  : We generate draw numbers from standard normal and upload these samples (data_het.txt)
  : We consider 30 draws (nd=30) for simulated maximum likelihood estimation.
- het has 159810 by 2 matrix
  : 159810 (5,327 consumption occasions times 30 draws)
  : 2 (2-segments) 
  : Similarly, temp_het1 and temp_het2 have 5,327 by 750 matrix                        
******************************************************************************/
nd = 30 ; 
load het[159810,2] = data_het.txt ; 
temp_het1 = reshape(het[.,1],n,nd)~reshape(het[.,1],n,nd)~reshape(het[.,1],n,nd)~reshape(het[.,1],n,nd)~reshape(het[.,1],n,nd) ;
temp_het2 = reshape(het[.,2],n,nd)~reshape(het[.,2],n,nd)~reshape(het[.,2],n,nd)~reshape(het[.,2],n,nd)~reshape(het[.,2],n,nd) ;

temp_co = context*~ones(n,nd) ; 
temp_ones =  ones(5,1).*.eye(nd) ;
temp_one = ones(n,nd) ;

/***************************************************************************************
 3. Set utility function (see Chapter 3. Model Formulation-Properties of the proposed model specification) 
- We can get 86 model parameters in the formulation are allowed to vary across users, which belongs to 2-segements.                                   
****************************************************************************************/
clear temp_nhet_1, temp_nhet_2, temp6, temp7, vcv1, nhet_2 ; 
clear e, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, ch1, ch2 ;
clear e_con1, e1_con1, e2_con1, e3_con1, e4_con1, e5_con1, e6_con1, e7_con1, e8_con1, e9_con1, e10_con1, e11_con1, ch1_con1, ch2_con1 ;
clear hll, lnp, ss, kk, ppp, pp, ii, nhet, zzz, loc1, loc2, loc, ideal1, ideal2, ideal, temp1, temp2 ;

proc fct(x) ;
    temp_nhet_1 = ((x[1]|x[2]|x[3]|x[4]|(ln(2))^(1/2))'.*.temp_one).*temp_het1 + (x[9]|x[10]|x[11]|x[12]|(-ln(2)/2))'.*.temp_one ;     
    temp_nhet_2 = ((x[5]|x[6]|x[7]|x[8]|(ln(2))^(1/2))'.*.temp_one).*temp_het2 + (x[13]|x[14]|x[15]|x[16]|(-ln(2)/2))'.*.temp_one ;  
    temp6 = (temp_co.*exp(temp_nhet_1))*temp_ones ;   
    temp7 = (temp_co.*exp(temp_nhet_2))*temp_ones ;   
    
    vcv1 = (x[17]~zeros(1,1))|(x[18]~x[19]) ;
    nhet_2 = het_2*vcv1 ;

    temp1 = x[20] + reshape(nhet_2[.,1], n, nd) ;
    temp2 = x[21] + reshape(nhet_2[.,2], n, nd) ;
 
/* segment 1 */
    loc1 = (x[32:41]|0)~(x[42:50]|0|0) ; 
    ideal1 = (x[70:73]|0)~(x[74:77]|0) ;

    loc = loc1 ;
    ideal = ideal1 ;        
    
    e1 = exp( x[22] - ((loc[1,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[1,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,1].*temp1 + nad[.,1].*temp2 ) ;
    e2 = exp( x[23] - ((loc[2,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[2,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,2].*temp1 + nad[.,2].*temp2 ) ;
    e3 = exp( x[24] - ((loc[3,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[3,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,3].*temp1 + nad[.,3].*temp2 ) ;
    e4 = exp( x[25] - ((loc[4,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[4,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,4].*temp1 + nad[.,4].*temp2 ) ;
    e5 = exp( x[26] - ((loc[5,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[5,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,5].*temp1 + nad[.,5].*temp2 ) ;
    e6 = exp( x[27] - ((loc[6,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[6,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,6].*temp1 + nad[.,6].*temp2 ) ;
    e7 = exp( x[28] - ((loc[7,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[7,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,7].*temp1 + nad[.,7].*temp2 ) ;
    e8 = exp( x[29] - ((loc[8,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[8,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,8].*temp1 + nad[.,8].*temp2 ) ;
    e9 = exp( x[30] - ((loc[9,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[9,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,9].*temp1 + nad[.,9].*temp2 ) ;
    e10 = exp( x[31] - ((loc[10,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[10,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,10].*temp1 + nad[.,10].*temp2 ) ;
    e11 = exp(0 - ((0 - ideal[chois[.,1],1])^2).*temp6 - ((0 - ideal[chois[.,1],2])^2).*temp7 + lad[.,11].*temp1 + nad[.,11].*temp2 ) ;
    
    e = e1+e2+e3+e4+e5+e6+e7+e8+e9+e10+e11 ;
    ch1 = (choi[.,1].*(e1./e)) + (choi[.,2].*(e2./e)) + (choi[.,3].*(e3./e)) + (choi[.,4].*(e4./e)) + (choi[.,5].*(e5./e)) + (choi[.,6].*(e6./e)) + (choi[.,7].*(e7./e)) + (choi[.,8].*(e8./e)) + (choi[.,9].*(e9./e)) + (choi[.,10].*(e10./e)) + (choi[.,11].*(e11./e)) ;

/* segment 2 */
    loc2 = (x[51:60]|0)~(x[61:69]|0|0) ; 
    ideal2 = (x[78:81]|0)~(x[82:85]|0) ;

    loc = loc2 ;
    ideal = ideal2 ;        
    
    e1 = exp( x[22] - ((loc[1,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[1,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,1].*temp1 + nad[.,1].*temp2 ) ;
    e2 = exp( x[23] - ((loc[2,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[2,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,2].*temp1 + nad[.,2].*temp2 ) ;
    e3 = exp( x[24] - ((loc[3,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[3,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,3].*temp1 + nad[.,3].*temp2 ) ;
    e4 = exp( x[25] - ((loc[4,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[4,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,4].*temp1 + nad[.,4].*temp2 ) ;
    e5 = exp( x[26] - ((loc[5,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[5,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,5].*temp1 + nad[.,5].*temp2 ) ;
    e6 = exp( x[27] - ((loc[6,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[6,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,6].*temp1 + nad[.,6].*temp2 ) ;
    e7 = exp( x[28] - ((loc[7,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[7,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,7].*temp1 + nad[.,7].*temp2 ) ;
    e8 = exp( x[29] - ((loc[8,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[8,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,8].*temp1 + nad[.,8].*temp2 ) ;
    e9 = exp( x[30] - ((loc[9,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[9,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,9].*temp1 + nad[.,9].*temp2 ) ;
    e10 = exp( x[31] - ((loc[10,1] - ideal[chois[.,1],1])^2).*temp6 - ((loc[10,2] - ideal[chois[.,1],2])^2).*temp7 + lad[.,10].*temp1 + nad[.,10].*temp2 ) ;
    e11 = exp(0 - ((0 - ideal[chois[.,1],1])^2).*temp6 - ((0 - ideal[chois[.,1],2])^2).*temp7 + lad[.,11].*temp1 + nad[.,11].*temp2 ) ;
     
    e = e1+e2+e3+e4+e5+e6+e7+e8+e9+e10+e11 ;
    ch2 = (choi[.,1].*(e1./e)) + (choi[.,2].*(e2./e)) + (choi[.,3].*(e3./e)) + (choi[.,4].*(e4./e)) + (choi[.,5].*(e5./e)) + (choi[.,6].*(e6./e)) + (choi[.,7].*(e7./e)) + (choi[.,8].*(e8./e)) + (choi[.,9].*(e9./e)) + (choi[.,10].*(e10./e)) + (choi[.,11].*(e11./e)) ;
    
    ss = (exp(x[86])|1) ; 
    ss = ss/sumc(ss) ;

    hll = zeros(np,ns) ;
    kk = 1 ;
    ppp = 1 ;
    pp = id[1,1] ;
    ii = 1 ;
    do until ii == n+1 ;
        if id[ii,1] ne pp ;
            hll[ppp,1] = ln(meanc((((prodc(ch1[kk:ii-1,.])))))) ;
            hll[ppp,2] = ln(meanc((((prodc(ch2[kk:ii-1,.])))))) ;
            kk = ii ;
            ppp= ppp+1 ;
            pp = id[ii,1] ;
        endif ;
        if ii == n ;            
            hll[ppp,1] = ln(meanc((((prodc(ch1[kk:ii-1,.])))))) ;
            hll[ppp,2] = ln(meanc((((prodc(ch2[kk:ii-1,.])))))) ;
        endif ;
        ii = ii+1 ;
    endo ;
    zzz = x ;

    lnp = ln(exp(hll)*ss) ;
    retp(-sumc(lnp)) ; 
endp;

/***************************************************************************************
 4. Constraints
- We have purpose to compute estimates of parameters of a constrained optimization function.
- proc ineqp(x) 
  : Nonlinear inequality of x
  : We wish to constrain a importance weight matrix to be "positive" definte.
  : That is, this constrains the minimum value of weight matrix to be greater than a small number (1e-5). 
- _co_Options = { BFGS STEPBT TRUST FORWARD FILE }
  : This global permits setting various CO options in a single global using identifiers. ;
    sets the line search method to STEPBT, the descent method to BFGS, 
    trust region on, the numerical gradient method to central differences, and output = 1.
  : The following is a list of the identifiers:
    [Algorithms] BFGS 
    [Line Search] STEPBT
    [Trust Method] TRUST
    [Gradient method] FORWARD
    [Output method] FILE                 
****************************************************************************************/
proc ineqp(x);
   retp((x[1]|x[2]|x[3]|x[4]|x[5]|x[6]|x[7]|x[8]) - (1e-5)*ones(8,1)) ;
endp;

_co_IneqProc = &ineqp ;
_co_Options = { BFGS STEPBT TRUST FORWARD FILE } ; 

/**************************************************************************************
 5. Print output results 
- x0 = (0.001)*ones(86,1)
  : We set 86 initial parameter values (0.001) to evaluate. 
- output file = CDMDU-model-output.out on
  : We print 86 values as output parameters.                           
***************************************************************************************/
x0 = (0.001)*ones(86,1) ; 

output file = CDMDU-model-output.out on ;
{ x,f,g,retcode } = co(&fct,x0) ; /* {x,f,g,retcode} = optprt(optmum(&lpr,x0)) */
call coprt(x,f,g,retcode) ;

print ;
2*fct(x)+rows(x)*ln(n) ;

output off ;
end ;

/**************************************************************************************
 6. Generate CDMDU-joint space map for a segment
- From output parameters, we draw joint space map vary by 5 contexts for each segment.
  : see Figure 4-1, 4-2 in Chapter 4.2.4 Empirical results                     
***************************************************************************************/